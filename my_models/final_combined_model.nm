

mdp


// Length of Street
const int N=6;

formula crash = ((a=h) | (a=p) | (h=p));
formula action = go_action|stop_action;
formula action2=go_action2|stop_action2;


module autonomous_car
	a : [1..N] init 1;
	go_action : bool init false;
	stop_action: bool init false;
	[go] !action -> 1:(go_action'=true);
	[stop] !action -> 1:(stop_action'=true);
	[move] (a<N)&go_action -> (a'=a+1)&(go_action'=false);
	[move] (a<N)&stop_action -> (a'=a)&(stop_action'=false);
	[] (a=N) -> true;
	//[move] a=1 ->  1 : (a'=2);
	//[move] a=1 -> 1 : (a'=1);
	//[move] a=2 ->  1 : (a'=3);
//	[move] a=2 -> 1 : (a'=2);
//	[move] a=3 ->  1 : (a'=4);
//	[move] a=3 -> 1 : (a'=3);
//	[move] a=4 ->  1 : (a'=5);
//	[move] a=4 -> 1 : (a'=4);
//	[move] a=5 ->  1 : (a'=6);
//	[move] a=5 -> 1 : (a'=5);
//	[move] a=6 ->  1 : (a'=6);
//	[move] a=6 -> 1 : (a'=6);
endmodule

module human_car 
	h : [0..N] init 0;
	go_action2 : bool init false;
	stop_action2: bool init false;
	[go2] !action2 -> 1:(go_action2'=true);
	[stop2] !action2 -> 1:(stop_action2'=true);
	[move] (h<N)&go_action2 -> (h'=h+1)&(go_action2'=false);
	[move] (h<N)&stop_action2 -> (h'=h)&(stop_action2'=false);
	[] (h=N) -> true;

//	[go] h=0 ->  1 : (h'=1);
//	[stop] h=0 -> 1 : (h'=0);
//	[go] h=1 ->  1 : (h'=2);
//	[stop] h=1 -> 1 : (h'=1);
//	[go] h=2 ->  1 : (h'=3);
//	[stop] h=2 -> 1 : (h'=2);
//	[go] h=3 ->  1 : (h'=4);
//	[stop] h=3 -> 1 : (h'=3);
//	[go] h=4 ->  1 : (h'=5);
//	[stop] h=4 -> 1 : (h'=4);
//	[go] h=5 ->  1 : (h'=6);
//	[stop] h=5 -> 1 : (h'=5);
//	[go] h=6 ->  1 : (h'=6);
//	[stop] h=6 -> 1 : (h'=6);

endmodule


label "a1" = (a=1);
label "a2" = (a=2);
label "a3" = (a=3);
label "a4" = (a=4);
label "a5" = (a=5);
label "a6" = (a=6);

label "h0" = (h=0);
label "h1" = (h=1);
label "h2" = (h=2);
label "h3" = (h=3);
label "h4" = (h=4);
label "h5" = (h=5);
label "h6" = (h=6);

label "crash" = (crash=true); 
label "goal" = (a=6);

label "go1" = go_action;
label "stop1" = stop_action;
label "go2" = go_action2;
label "stop2" = stop_action2;








const int k =53; 
 module environment 
 p : [0..k] init 14;
 [move] (p=14) ->  0.3 : (p'=4) +0.35 : (p'=42) +0.35 : (p'=8) ; 
[move] (p=3) ->  1.0 : (p'=3) ; 
[move] (p=4) ->  1.0 : (p'=3) ; 
[move] (p=37) ->  1.0 : (p'=3) ; 
[move] (p=26) ->  1.0 : (p'=3) ; 
[move] (p=1) ->  0.6 : (p'=4) +0.3 : (p'=1) +0.1 : (p'=21) ; 
[move] (p=34) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=0) ->  0.48 : (p'=4) +0.32 : (p'=25) +0.2 : (p'=41) ; 
[move] (p=25) ->  0.42 : (p'=4) +0.33 : (p'=36) +0.25 : (p'=48) ; 
[move] (p=36) ->  0.36 : (p'=4) +0.34 : (p'=50) +0.3 : (p'=16) ; 
[move] (p=50) ->  0.35 : (p'=14) +0.3 : (p'=4) +0.35 : (p'=33) ; 
[move] (p=42) ->  0.18 : (p'=4) +0.37 : (p'=10) +0.45 : (p'=28) ; 
[move] (p=10) ->  0.12 : (p'=4) +0.38 : (p'=32) +0.5 : (p'=44) ; 
[move] (p=15) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=5) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=46) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=52) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=40) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=43) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=47) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=27) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=51) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=12) ->  0.54 : (p'=4) +0.31 : (p'=0) +0.15 : (p'=23) ; 
[move] (p=21) ->  0.6 : (p'=37) +0.05 : (p'=1) +0.3 : (p'=21) +0.05 : (p'=22) ; 
[move] (p=22) ->  0.6 : (p'=26) +0.1 : (p'=21) +0.3 : (p'=22) ; 
[move] (p=49) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=20) ->  0.48 : (p'=26) +0.2 : (p'=41) +0.32 : (p'=38) ; 
[move] (p=38) ->  0.42 : (p'=26) +0.25 : (p'=48) +0.33 : (p'=19) ; 
[move] (p=19) ->  0.36 : (p'=26) +0.3 : (p'=16) +0.34 : (p'=13) ; 
[move] (p=13) ->  0.3 : (p'=26) +0.35 : (p'=33) +0.35 : (p'=30) ; 
[move] (p=30) ->  0.3 : (p'=26) +0.35 : (p'=8) +0.35 : (p'=2) ; 
[move] (p=2) ->  0.18 : (p'=26) +0.45 : (p'=28) +0.37 : (p'=29) ; 
[move] (p=29) ->  0.12 : (p'=26) +0.5 : (p'=44) +0.38 : (p'=45) ; 
[move] (p=35) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=24) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=6) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=18) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=7) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=9) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=11) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=39) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=17) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
[move] (p=31) ->  0.54 : (p'=26) +0.15 : (p'=23) +0.31 : (p'=20) ; 
endmodule 
label "p7" = (p=0)|(p=1)|(p=5)|(p=10)|(p=12)|(p=14)|(p=15)|(p=25)|(p=27)|(p=32)|(p=34)|(p=36)|(p=40)|(p=42)|(p=43)|(p=46)|(p=47)|(p=50)|(p=51)|(p=52) ; 
label "p9" = (p=2)|(p=6)|(p=7)|(p=9)|(p=11)|(p=13)|(p=17)|(p=18)|(p=19)|(p=20)|(p=22)|(p=24)|(p=29)|(p=30)|(p=31)|(p=35)|(p=38)|(p=39)|(p=45)|(p=49) ; 
label "p10" = (p=3) ; 
label "p3" = (p=4) ; 
label "p8" = (p=8)|(p=16)|(p=21)|(p=23)|(p=28)|(p=33)|(p=41)|(p=44)|(p=48) ; 
label "p5" = (p=26) ; 
label "p4" = (p=37) ; 

